#Encapsulation: (data hiding) is the bundling of data with the methods that operate on that data. It restricts direct access to some of an objectâ€™s components and can prevent the accidental modification of data.
#Inheritance: is a mechanism in which one class acquires the property of another class. It provides a way to create a new class from an existing class.
#Polymorphism: is the ability to present the same interface for different data types. It allows methods to do different things based on the object it is acting upon.
#Abstraction: is the concept of hiding the complex reality while exposing only the necessary parts. It helps in reducing programming complexity and effort.
#Class: A class is a blueprint for creating objects. It defines a set of attributes and methods that the created objects will have.
#Object: An object is an instance of a class. It contains data and methods that operate on that data.
#Method: A method is a function defined within a class that operates on the data contained in the object.
#Instance Variable: An instance variable is a variable that is defined within a class and is accessible to all methods in that class. It is prefixed with an '@' symbol.
#Class Variable: A class variable is a variable that is shared among all instances of a class. It is prefixed with two '@' symbols ('@@').
#Module: A module is a collection of methods and constants that can be included in classes. It allows for code reuse and organization.
#Mixin: A mixin is a module that is included in a class to add functionality. It allows for multiple inheritance in Ruby.
#Duck Typing: Duck typing is a concept in Ruby where the type or class of an object is less important than the methods it defines. If an object behaves like a certain type, it can be treated as that type.
#Singleton Method: A singleton method is a method that is defined for a single object. It allows for object-specific behavior.
#Method Overriding: Method overriding is a feature that allows a subclass to provide a specific implementation of a method that is already defined in its superclass.
#Method Overloading: Method overloading is a feature that allows multiple methods with the same name but different parameters to exist in the same class.
#Constructor: A constructor is a special method that is called when an object is created. It initializes the object's attributes.
#Destructor: A destructor is a special method that is called when an object is destroyed. It cleans up any resources used by the object.
#Access Modifiers: Access modifiers are keywords that set the accessibility of classes, methods, and other members. In Ruby, the access modifiers are public, private, and protected.
#Public: Public methods can be called by anyone. They are accessible from outside the class.
#Private: Private methods can only be called within the class. They are not accessible from outside the class.
#Protected: Protected methods can be called by objects of the same class or subclasses. They are not accessible from outside the class hierarchy.
#Getter Method: A getter method is a method that retrieves the value of an instance variable. It allows for read access to the variable.
#Setter Method: A setter method is a method that sets the value of an instance variable. It allows for write access to the variable.
#Class Method: A class method is a method that is called on the class itself, rather than on an instance of the class. It is defined with 'self' before the method name.
#Instance Method: An instance method is a method that is called on an instance of a class. It operates on the data contained in that instance.